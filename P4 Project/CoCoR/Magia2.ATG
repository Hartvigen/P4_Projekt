/* This file contains the Token specification and Grammar which COCO/R uses to construct the scanner
and parser. COCO/R uses Extend Bacus-Naur form (EBNF) for the grammar, as well as its own series of commands
which will be explained when met first in context.  */

/* The EBNF uses the following extensions: */
/* [] Brackets mean that the string is written zero or one times.  */

/* {} Curly brackets mean that the string is repeated zero or more times  */

/* () is a grouping used alongside |. The parenthesis contains a series of strings seperated by |. */
/* This means that exactly one of the strings is chosen. */

/* The required start of a COCO/R grammar file, while the "MAGIA" part specifies */
/* the starting symbol of the grammar.*/
COMPILER MAGIA   


/*public CodeGenerator gen;*/
    
  
/*--------------------------------------------------------------------------*/
/* The following section contains the token specification of MAGIA.*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  CharInLine = ANY - cr - lf.                   /* 'ANY' refers to all chars in UTF-8. */
  AnyButDoubleQuote = CharInLine - '\"'.        /* Any char that is not a double quote or new-line */

TOKENS
  IDENT  = letter {letter | digit | '_'}.
  NUMBER = digit {digit} ['.' digit {digit}].
  TEXT = '"' {"\\\"" | AnyButDoubleQuote} '"'.  /* The string  \\\"  is an escaped backslash (\\) and double qoute (\") */
  
COMMENTS FROM "/*" TO "*/" NESTED               /* Nested means: "There can be comments inside comments" */
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab                            /* These characters are ignored by the scanner */


/*------------------------------------------------------------------------*/
/* The rest of the file contains the grammar for MAGIA.  */
PRODUCTIONS
MAGIA =                                         (. mainNode = null; BlockNode mainBlock = new BlockNode(); .)
    {											(. tab = tab.OpenScope();           .)
		SYNC Head<out HeadNode head>            (. mainBlock.Add(head);             .)
    }											(.  .)
    { SYNC Stmt<out StmtNode stmt>              (. mainBlock.Add(stmt);             .)
    }
    { SYNC FuncDecl<out FuncDeclNode funcDecl>  (. mainBlock.Add(funcDecl);         .)
    }                                           (. mainNode = new Magia(mainBlock); .)
.


/*------------------------------------------------------------------------*/
Head<out HeadNode head> =                       (. head = null; VarDeclNode attrDecl = null; .)
    '[' 
        ( "vertex"                              (. head = new HeadNode(HeadNode.Vertex); .) /* TODO: Enter vertex symbol table */
        | "edge"                                (. head = new HeadNode(HeadNode.Edge);   .) /* TODO: Enter edge symbol table */
        ) 
        WEAK '(' 
            VarDecl<out attrDecl>               (. head?.AddAttr(attrDecl); .)
            { WEAK ',' VarDecl<out attrDecl>    (. head?.AddAttr(attrDecl); .)
            }
        WEAK ')' 
    ']' 
.


/*------------------------------------------------------------------------*/
FuncDecl<out FuncDeclNode funcNode> =               (. funcNode = null; string funcName = ""; BaseType returnType = null; BaseType protocol = null; .)
    "func" (Type<out returnType> | "none") IDENT    (. funcName = t.val; BlockNode paramBlock = new BlockNode(); BlockNode stmtBlock = new BlockNode(); .)
    WEAK '('                                        (. tab = tab.OpenScope(funcName); VarDeclNode paramDecl = null; List<BaseType> parameterTypes = new List<BaseType>(); .)
        [ IF(la.val != ")" && la.val != "{") 
          ParamDecl<out paramDecl>                    (. paramBlock.Add(paramDecl); parameterTypes.Add(paramDecl.SymbolObject.Type); .)
          { WEAK ',' ParamDecl<out paramDecl>         (. paramBlock.Add(paramDecl); parameterTypes.Add(paramDecl.SymbolObject.Type); .)
          }
        ]                                           (. protocol = new BaseType(returnType, parameterTypes); .)
    WEAK ')'
    WEAK '{'                                        (. StmtNode stmt = null; .)
        { SYNC Stmt<out stmt>                       (. stmtBlock.Add(stmt); .)
        }
    WEAK '}'                                        (. SymTable funcScope = tab; tab = tab.CloseScope(); 
                                                       Obj funcObj = tab.NewObj(funcName, protocol, Func, funcScope); 
                                                       funcNode = new FuncDeclNode(funcObj, paramBlock, stmtBlock); 
                                                    .)
.


/*------------------------------------------------------------------------*/
Stmt<out StmtNode stmt> =   (. stmt = null; .)
    ( StructStmt<out stmt>
    | SimpleStmt<out stmt>
    | KeywordStmt<out stmt>
    | FullDecl<out stmt>
    )
.


/*------------------------------------------------------------------------*/
StructStmt<out StmtNode stmt> = (. stmt = null; .)
    ( StmtWhile<out stmt>
    | StmtFor<out stmt>
    | StmtForeach<out stmt>
    | StmtIf<out stmt>
    )
.

/*------------------------------------------------------------------------*/
StmtWhile<out StmtNode w> =     (. w = null; BlockNode stmtBlock = new BlockNode(); .)
    "while"                     (. ExprNode condition = null; StmtNode stmt = null; .)
    '(' 
        Expr<out condition>
    ')' 
    '{'                         (. tab = tab.OpenScope(); .)
        { SYNC Stmt<out stmt>   (. stmtBlock.Add(stmt); .)
        }                       (. tab = tab.CloseScope(); .)
    '}'                         (. w = new WhileNode(condition, stmtBlock); .)
.

/*------------------------------------------------------------------------*/
StmtFor<out StmtNode f> =               (. f = null; BlockNode stmtBlock = new BlockNode(); StmtNode stmt = null; .)
    "for"                               (. StmtNode init = null; ExprNode cond = null; StmtNode iter = null; .)
    '(' 
        ( SimpleStmt<out init>
        | VarDecl<out VarDeclNode vert> (. init = vert; .)
        ) WEAK ','
        Expr<out cond> WEAK ','
        SymbolRef<out VarNode target>
        Assign<out ExprNode expr>       (. iter = new AssignNode(target, expr); .)
    ')' 
    '{'                                 (. tab = tab.OpenScope(); .)
        { SYNC Stmt<out stmt>           (. stmtBlock.Add(stmt); .)
        }                               (. tab = tab.CloseScope(); .)
    '}'                                 (. f = new ForNode(init, cond, iter, stmtBlock); .)
.

/*------------------------------------------------------------------------*/
StmtForeach<out StmtNode f> =           (. f = null; StmtNode stmt = null; .)
    "foreach"                           (. VarDeclNode itrVar = null; BlockNode stmtBlock = new BlockNode(); .)
    '('                                 (. tab = tab.OpenScope(); .)
        Type<out BaseType type> IDENT   (. itrVar = new VarDeclNode(tab.NewObj(t.val, type, Var), null); .)
        "in" 
        Expr<out ExprNode collection> 
    ')' 
    '{'
        { SYNC Stmt<out stmt>           (. stmtBlock.Add(stmt); .)
        }                               (. tab = tab.CloseScope(); .)
    '}'                                 (. f = new ForeachNode(itrVar, collection, stmtBlock); .)
.

/*------------------------------------------------------------------------*/
StmtIf<out StmtNode i> =            (. i = null; ExprNode condition = null; BlockNode stmtBlock; .)
    "if" '('                        (. StmtNode stmt = null; IfNode latestNode = null; .)
        Expr<out condition>
    ')' '{'                         (. tab = tab.OpenScope(); stmtBlock = new BlockNode(); .)
        { SYNC Stmt<out stmt>       (. stmtBlock.Add(stmt); .)
        }                           (. tab = tab.CloseScope(); .)
    '}'                             (. i = latestNode = new IfNode(condition, stmtBlock); .)
    { 
        "elseif" '('
            Expr<out condition>
        ')' '{'                     (. tab = tab.OpenScope(); stmtBlock = new BlockNode(); .)
            { SYNC Stmt<out stmt>   (. stmtBlock.Add(stmt); .)
            }                       (. tab = tab.CloseScope(); .)
        '}'                         (. latestNode.SetElse(new IfNode(condition, stmtBlock)); latestNode = latestNode.ElseNode; .)
    } 
    [
        "else" '{'                  (. tab = tab.OpenScope(); stmtBlock = new BlockNode(); .)
            { SYNC Stmt<out stmt>   (. stmtBlock.Add(stmt); .)
            }                       (. tab = tab.CloseScope(); .)
        '}'                         (. latestNode.SetElse(new IfNode(null, stmtBlock)); .)
    ]
.


/*------------------------------------------------------------------------*/
SimpleStmt<out StmtNode stmt> =         (. stmt = null; .)
    CallOrID<out IdentNode i>           (. stmt = new LoneCallNode(i); .)
    [ Assign<out ExprNode expr>         (. stmt = new AssignNode(i, expr); .)
    | EdgeOneOrMore<i, out stmt>
    ]
.

/*------------------------------------------------------------------------*/
EdgeOneOrMore<IdentNode leftSide, out StmtNode stmt> = (. stmt = null; EdgeCreateNode edge; .)
    EdgeOpr<out int op>                             (. stmt = edge = new EdgeCreateNode(leftSide, op); .)
    ( 
        CallOrID<out IdentNode end>                 (. edge.AddRightSide(end, new List<AssignNode>()); .)
    | 
        EdgeCreate<edge>
    | 
      '{'
        EdgeCreate<edge> 
        { WEAK ',' EdgeCreate<edge> }
      '}'
    )
.

/*------------------------------------------------------------------------*/
EdgeOpr<out int op> =   (. op = 0;                  .)
    ( "<-"              (. op = Operators.Leftarr;  .)
    | "--"              (. op = Operators.Nonarr;   .)
    | "->"              (. op = Operators.Rightarr; .)
    )
.

/*------------------------------------------------------------------------*/
EdgeCreate<EdgeCreateNode edge> =           (. VarNode varNode = null; ExprNode expr = null; List<AssignNode> attributes = new List<AssignNode>(); .)
    '(' 
        CallOrID<out IdentNode right>
        { WEAK ',' SymbolRef<out varNode>
          Assign<out expr>                  (. attributes.Add(new AssignNode(varNode, expr)); .)
        }                                   (. edge.AddRightSide(right, attributes); .)
    ')'
.


/*------------------------------------------------------------------------*/
KeywordStmt<out StmtNode stmt> =            (. stmt = null; .)
    ( "return" Expr<out ExprNode expr>      (. stmt = new ReturnNode(expr); .)
    | "break"                               (. stmt = new BreakNode(); .)
    | "continue"                            (. stmt = new ContinueNode(); .)
    )
.


/*------------------------------------------------------------------------*/
FullDecl<out StmtNode stmt> =               (. stmt = null; VertexDeclNode vertexDecl = null; .)
    Type<out BaseType type>
    ( 
      IDENT                                 (. string name = t.val; ExprNode expr = null; .)
      [ Assign<out expr>
      ]                                     (. stmt = new VarDeclNode(tab.NewObj(name, type, Var), expr); .)
    |
      '{'                                   (. MultiDecl multiDecl = new MultiDecl(); .)
        VtxDecl<out vertexDecl>             (. multiDecl.AddDecl(vertexDecl); .)
        { WEAK ',' VtxDecl<out vertexDecl>  (. multiDecl.AddDecl(vertexDecl); .)
        }                                   (. stmt = multiDecl; .)
      '}'
    | 
      VtxDecl<out vertexDecl>               (. stmt = vertexDecl; .)
    )
.

/*------------------------------------------------------------------------*/
VtxDecl<out VertexDeclNode vertexDecl> =    (. vertexDecl = null; VarNode varNode = null; ExprNode expr = null; .)
    '(' 
        IDENT                               (. vertexDecl = new VertexDeclNode(tab.NewObj(t.val, new BaseType("vertex"), Var)); .)
        { WEAK ',' SymbolRef<out varNode>
          Assign<out expr>                  (. vertexDecl.AddAttr(new AssignNode(varNode, expr)); .)
        }
    ')'
.


/*------------------------------------------------------------------------*/
ParamDecl<out VarDeclNode varDecl> =  (. varDecl = null; BaseType type = null; .)
    Type<out type> IDENT              (. varDecl = new VarDeclNode(tab.NewObj(t.val, type, Var), null); .)
.


/*------------------------------------------------------------------------*/
VarDecl<out VarDeclNode varDecl> =  (. varDecl = null; BaseType type = null; string name = null; ExprNode value = null; .)
    Type<out type> IDENT            (. name = t.val; .)                             
    [ Assign<out value>
    ]                               (. varDecl = new VarDeclNode(tab.NewObj(name, type, Var), value); .)
.

/*------------------------------------------------------------------------*/
Assign<out ExprNode expr> = (. expr = null; CollecConst collec = null; .)
    '=' Expr<out expr>
.


/*------------------------------------------------------------------------*/
Expr<out ExprNode e>                (. e = null; .)
    = ExprOR<out e>.
    
/*------------------------------------------------------------------------*/
ExprOR<out ExprNode e>              (. e = null; int op = 0; .)
    = ExprAnd<out ExprNode e1>      (. e = e1; .)
    { "||"                          (. op  = Operators.Or; .)
      ExprAnd<out ExprNode e2>      (. e = new BinExprNode(e, op, e2); .)                                
    }.

/*------------------------------------------------------------------------*/
ExprAnd<out ExprNode e>             (. e = null; int op = 0; .)
    = ExprEQ<out ExprNode e1>       (. e = e1; .)
    { "&&"                          (. op = Operators.And; .)
      ExprEQ<out ExprNode e2>       (. e = new BinExprNode(e, op, e2); .)
    }.

/*------------------------------------------------------------------------*/
ExprEQ<out ExprNode e>              (. e = null; int op = 0; .)
    = ExprRel<out ExprNode e1>      (. e = e1; .)
    [("=="                          (. op = Operators.Eq; .)
    | "!="                          (. op = Operators.Neq; .)
    ) ExprRel<out ExprNode e2>      (. e = new BinExprNode(e, op, e2); .)
    ].

/*------------------------------------------------------------------------*/
ExprRel<out ExprNode e>             (. e = null; int op = 0; .)
    = ExprPlus<out ExprNode e1>     (. e = e1; .)
    [('<'                           (. op = Operators.Less; .)
    | '>'                           (. op = Operators.Greater; .)
    | "<="                          (. op = Operators.Lesseq; .)
    | ">="                          (. op = Operators.Greateq; .)
    ) ExprPlus<out ExprNode e2>     (. e = new BinExprNode(e, op, e2); .)
    ].

/*------------------------------------------------------------------------*/
ExprPlus<out ExprNode e>            (. e = null; bool b = false; int op = 0; .)
    = ['-'                          (. b = true; .)
    ] ExprMult<out ExprNode e1>     (. if(b) e = new UnaExprNode(Operators.Umin, e1); else e = e1; .)
    {('+'                           (. op = Operators.Plus; .)
    | '-'                           (. op = Operators.Bimin; .)
    ) ExprMult<out ExprNode e2>     (. e = new BinExprNode(e, op, e2); .)
    }.

/*------------------------------------------------------------------------*/
ExprMult<out ExprNode e>            (. e = null; int op = 0;.)
    = ExprNot<out ExprNode e1>      (. e = e1; .)
    {('*'                           (. op = Operators.Mult; .)
    | '/'                           (. op = Operators.Div; .)
    | '%'                           (. op = Operators.Mod; .)
    ) ExprNot<out ExprNode e2>      (. e = new BinExprNode(e, op, e2); .)
    }.

/*------------------------------------------------------------------------*/
ExprNot<out ExprNode e>             (. e = null; bool b = false;.)
    = ['!'                          (. b = true; .)
    ] Factor<out e>                 (. if(b) e = new UnaExprNode(Operators.Not, e); .)
    .

/*------------------------------------------------------------------------*/
Factor<out ExprNode e>              (. e = null; .)
    = Const<out e>
    | '(' Expr<out e> ')'           (. e.InParentheses = true; .)
    | CallOrID<out IdentNode expr>  (. e = expr; .)
    | 
      CollecType<out BaseType type>
      '{' 
        Args<type, out collec>      (. e = collec; .)
      '}'
    .       


/*------------------------------------------------------------------------*/
CallOrID<out IdentNode i> =                     (. i = null; IdentNode bottom = null; .)
    SymbolRef<out VarNode varNode>              (. i = varNode; .)
    [
        '(' 
            Args<null, out CollecConst collec>  (. i = new CallNode(i.Ident, collec); .)
        ')'
    ]                                           (. bottom = i; .)
    {
        WEAK '.' SymbolRef<out VarNode member>  (. bottom.Source = member; bottom = member; .)
    }.

/*------------------------------------------------------------------------*/
Args<BaseType type, out CollecConst collec> =   (. collec = new CollecConst(type); ExprNode expr; .)
    [
        Expr<out expr>                          (. collec.Add(expr); .)
        {
            WEAK ',' Expr<out expr>             (. collec.Add(expr); .)
        }
    ].


/*------------------------------------------------------------------------*/
SymbolRef<out VarNode varNode> =    (. varNode = null; .)
    (
        IDENT                       (. varNode = new VarNode(t.val); .)
    ).

/*------------------------------------------------------------------------*/
Const<out ExprNode e> =     (. e = null; .)
    ( NUMBER                (. e = new NumConst(Convert.ToDouble(t.val, System.Globalization.CultureInfo.InvariantCulture));    .)
    | TEXT                  (. e = new TextConst(t.val);                    .)
    | "true"                (. e = new BoolConst(Convert.ToBoolean(t.val)); .)
    | "false"               (. e = new BoolConst(Convert.ToBoolean(t.val)); .)
    | "none"                (. e = new NoneConst();                         .)
    ).

/*------------------------------------------------------------------------*/
Type<out BaseType type> =        (. type = null; .)
    ( SingleType<out type>
    | CollecType<out type>
    ).

/*------------------------------------------------------------------------*/
/* Types is, like Operators, a file in the solution containing enumerate values for all types. */
CollecType<out BaseType type> =                                (. type = null; BaseType subType = null; .)
    ( "list" WEAK '<' SingleType<out subType> WEAK '>'         (. type = new BaseType(subType, new BaseType("list"));  .)
    | "set" WEAK '<' SingleType<out subType> WEAK '>'          (. type = new BaseType(subType, new BaseType("set"));   .)
    | "queue" WEAK '<' SingleType<out subType> WEAK '>'        (. type = new BaseType(subType, new BaseType("queue")); .)
    | "stack" WEAK '<' SingleType<out subType> WEAK '>'        (. type = new BaseType(subType, new BaseType("stack")); .)
    ).
/*------------------------------------------------------------------------*/
SingleType<out BaseType type> = (. type = null; .)
    ( "number"                  (. type = new BaseType("number");  .)
    | "boolean"                 (. type = new BaseType("boolean"); .)
    | "text"                    (. type = new BaseType("text");    .)
    | "vertex"                  (. type = new BaseType("vertex");  .)
    | "edge"                    (. type = new BaseType("edge");    .)
    ).

/*------------------------------------------------------------------------*/

END MAGIA.