COMPILER MAGIA 
 
 
CHARACTERS
 letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
 digit = "0123456789".
 cr = '\r'.
 lf = '\n'.
 tab = '\t'.
 CharInLine = ANY - cr - lf. 
 AnyButDoubleQuote = CharInLine - '\"'. 


TOKENS
 IDENT = letter {letter | digit | '_'}.
 NUMBER = digit {digit} ['.' digit {digit}].
 TEXT = '"' {AnyButDoubleQuote | "\\\""} '"'. 
 
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab 



PRODUCTIONS

MAGIA = { Head } { Stmt } { FuncDecl } .


Head = '[' ( "vertex" | "edge" ) '(' VarDecl { ',' VarDecl } ')' ']' .

FuncDecl = "func" (Type | "none") IDENT '(' [ VarDecl { ',' VarDecl } ] ')' '{' { Stmt } '}' .

Stmt = ( StructStmt | KeywordStmt | SimpleStmt | FullDecl ).


StructStmt = ( StmtWhile | StmtFor | StmtForeach | StmtIf ).

StmtWhile = "while" '(' Expr ')' '{' { Stmt } '}' .

StmtFor = "for" '(' ( SimpleStmt | VarDecl )  ',' Expr  ',' Stmt')' '{' { Stmt } '}' .

StmtForeach = "foreach" '(' Type IDENT "in" Expr ')' '{' { Stmt } '}' .

StmtIf = "if" '(' Expr ')' '{' { Stmt } '}' { "elseif" '(' Expr ')' '{' { Stmt } '}' } [ "else" '{' { Stmt } '}' ].


KeywordStmt = ( "return" Expr | "break" | "continue" ).


SimpleStmt = CallOrID { Member } [Assign | EdgeOneOrMore].

EdgeOneOrMore = EdgeOpr ( Identifier | EdgeCreate | '{' EdgeCreate { ',' EdgeCreate } '}' ).

EdgeOpr = ( "<-" | "--" | "->" ).

EdgeCreate = '(' Identifier { ',' Identifier Assign } ')'.


FullDecl = Type ( IDENT [ Assign ] | '{' VtxDecl { ',' VtxDecl } '}' | VtxDecl ).

VtxDecl = '(' IDENT { ',' Identifier Assign } ')'.


VarDecl = Type IDENT [ Assign ].

Assign = '=' ( Expr | '{' Args '}' ).



Expr = ExprOR. 

ExprOR = ExprAnd { "||" ExprAnd }.

ExprAnd = ExprEQ { "&&" ExprEQ }.

ExprEQ = ExprRel [ ("==" | "!=" ) ExprRel ].

ExprRel = ExprPlus [ ('<' | '>' | "<=" | ">=" ) ExprPlus ].

ExprPlus = ['-'] ExprMult { ('+' | '-' ) ExprMult }.

ExprMult = ExprNot { ('*' | '/' | '%' ) ExprNot }.

ExprNot = ['!'] Factor.

Factor = Const | '(' Expr ')' | CallOrID { Member }. 


CallOrID = Identifier ['(' Args ')'].

Args = [Expr { ',' Expr } ].

Member = '.' CallOrID.


Identifier = ( IDENT ).

Const = ( NUMBER | TEXT | "true"| "false" | "none" ).

Type = ( SingleType | CollecType).

CollecType = ( "list" | "set" | "queue" | "stack" ) '<' SingleType '>'.

SingleType = ( "number" | "boolean" | "text" | "vertex" | "edge" ).


END MAGIA.