[vertex(number distance = 1000000000, vertex parent)]
[edge(number weight = 1)]

/*-------------------------------------------------------------------------*/

vertex endNode = Initialize()
Print()

set<vertex> processed = set<vertex> { }
list<vertex> remaining = GetVertices()

while (!IsEmpty(remaining)) {
    vertex current = ExtractMin(remaining)
    Add(processed, current)
    foreach (vertex v in GetAdjacent(current)) {
        Relax(current, v)
    }
    Print()
}

Print()

/*-------------------------------------------------------------------------*/

func none Relax(vertex start, vertex end) {
    number edgeLength = GetEdge(start, end).weight
    if (end.distance > start.distance + edgeLength) {
        end.distance = start.distance + edgeLength
        end.label = AsText(end.distance)
        end.parent = start
    }
}

func vertex ExtractMin(list<vertex> remaining) {
    vertex smallest = Get(remaining, 1)
    number smallestIndex = 1
    number currentIndex = 1

    foreach (vertex v in remaining) {
        if (v.distance < smallest.distance) {
            smallest = v
            smallestIndex = currentIndex
        }
        currentIndex = currentIndex + 1
    }

    Remove(remaining, smallestIndex)
    return smallest
}

func vertex Initialize() {
    vertex {
        (A, label = "A", distance = 0),
        (v1, distance = 1000000000),
        (v2, distance = 1000000000),
        (v3, distance = 1000000000),
        (v4, distance = 1000000000),
        (v5, distance = 1000000000),
        (v6, distance = 1000000000),
        (B, distance = 1000000000, label = "B")
    }

    A -- { (v1, weight=1), (v4, weight=1) }
    v2 -- { (v1, weight=1), (v3, weight=1) }
    v3 -- { (v4, weight=1), (v5, weight=1) }
    v5 -- { (B, weight=1), (v4, weight=1), (v6, weight=1) }
    v6 -- { (B, weight=1) }

    return B
}
