namespace P4_ProjectTests1.Visitors.TestCode
{
    public abstract class KnownGoodFiles
    {
        public const string UglyCode = "[vertex(number distance = 1, vertex parent = none,boolean bVal = false)] [edge(number weight = 1, text t)] hello(\"hello\")\nvertex(v156) tester() number x\n\n\n\t\t\t\t\t= whileifs() set<vertex> vset = \n\n\ngraph.vertices()\ngraph.vertices().clear()\t\t\tVEDecls()\nexprs()\t\t\tmanyparams(v156, 10, false, \"hello\")\n\nfunc number GetVal(number a){\n    return 3\n+ 4 + a\n} func none whileifs() {\n\t\t\t\tnumber total = 2\n\t\t  number sum\n\t\tboolean b =\t\t\tfalse\n\t\t\t\twhile(!b)\n{\t\n\t\t\tif (total == 1)\n        {\t\n\t\t\t\ttotal = total + 1\n            if (total == 1000)\n            {\t\n\t\t\t\t\t\t\t\t break \n            } else\t\n            {\n                 continue \n            }\t\n            if (\ttotal == 7)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        {\t\n\t\t\t\t\t\t\t\ttotal = \n\t\t\t\t\t\t\t\ttotal \n\t\t\t\t\t\t\t\t+ \n\t\t\t\t\t\t\t\tGetVal(total)\n\t\t\t\t        } elseif (total == 10)\n\n\t\t\t\n\t\t\t\t\t    {\n\t\t         total = GetVal(total\t)}\t\t\t\telse\t\t\t\t      {\t\n\t\t\t\t\t\t\t\ttotal = 0\n            } \n            b = true\t\n        }\t\n        total = total - 1\n    }\n    while(total > 0)\t\n    {\t\n\t\t\tsum = sum + total\n    }\t\n    number i\n    for(i =\t\t\t\t\tsum, i > 0,\n\ti = i - 1)\n    \n\t{\n\n        total = total + sum\t\t/\t\t\t\t\t\ti\n    }\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t return total\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\nfunc none tester()\n{\n    number p = 1.5\t\t\t\t\t\t\t   list<number>\t\n\t\t\t\t\t\t\t   nlist = {1, 2, 3, 4, 5}\n\t\t\t\t\t    foreach(number n in\t\t\t\tnlist)\n    {\n        p =\t\t\t\t p + n\n    }\n}\n\nfunc none VEDecls()\n{\n    vertex(v1)\n\t\t\t\t\t\t\t    vertex(v2,\t\t\t\t\t\t\t\n\ndistance = 4, parent = v1, bval = true)\n    vertex(v3, bval = true)\n    vertex{(v4), (v5, parent =\t\t\t\t\t\t\n\t\t\t\tv3), (v6, distance = 4, parent = v1, bval = true)}\n    v1 -- v2\n    v2 -- (v3, t =\t\t\t\t \"Hello my lady\")\n    edge e =\t\t\tgraph.getedge(v2, v3)\n    vertex var = v2\n    graph.removeedge(v1,\t\t\t\t\t v2)\n    graph.removeedge(v2,\t\t\t\t\t v3)\n    v2 -> v3\n    v3 -> {(v4), (v5, weight =\t\t\t\t\t 42, t = \"The Answer\")}\n    v1 <- v6\n    v2 <- {(v3),\t\t\t\t (v5, t = \"the world\")}\n    graph.clearedges()\n    graph.clearvertices()\n    vertex(\t\t\tv1_2)\n    vertex(v2_2, distance = 4, parent = v1, bval = true) v1 \n\t-> \n\tv2\n    graph.clearall()}  func none expr() {\n    vertex(v2_3,    \n\tdistance = 4,    \n\tparent = v1, bval = true)\n    boolean b = 5\n\t!= 6\n\t&& 5 \n\t- 8 + 9 * (v2.distance) > -8 + 11 % 3 \n\t||\n\t5 == 8 \n\t||\n\t11 * (54 - 6) < -4\n}\n\nfunc boolean\t\tmanyparams(vertex     \nv1    , \nnumber\t\tn,\n\nboolean\t\t\tmightbetrue, text greeting)\n{\t\treturn false\n}\nfunc boolean hello(text greet)\n{    return true}\n";

        public const string PrettyCode = "[vertex(number distance = 1, vertex parent = none, boolean bVal = false)]\n[edge(number weight = 1, text t)]\n\nhello(\"hello\")\nvertex(v156)\ntester()\nnumber x = whileifs()\nset<vertex> vset = graph.vertices()\ngraph.vertices().clear()\nVEDecls()\nexprs()\nmanyparams(v156, 10, false, \"hello\")\n\nfunc number GetVal(number a)\n{\n    return 3 + 4 + a\n}\n\nfunc none whileifs()\n{\n    number total = 2\n    number sum\n    boolean b = false\n    while(!b)\n    {\n        if (total == 1)\n        {\n            total = total + 1\n            if (total == 1000)\n            {\n                 break \n            } else\n            {\n                 continue \n            } \n            if (total == 7)\n            {\n                total = total + GetVal(total)\n            } elseif (total == 10)\n            {\n                total = GetVal(total)\n            } else\n            {\n                total = 0\n            } \n            b = true\n        } \n        total = total - 1\n    }\n    while(total > 0)\n    {\n        sum = sum + total\n    }\n    number i\n    for(i = sum, i > 0, i = i - 1)\n    {\n        total = total + sum / i\n    }\n    return total\n}\n\nfunc none tester()\n{\n    number p = 1.5\n    list<number> nlist = {1, 2, 3, 4, 5}\n    foreach(number n in nlist)\n    {\n        p = p + n\n    }\n}\n\nfunc none VEDecls()\n{\n    vertex(v1)\n    vertex(v2, distance = 4, parent = v1, bval = true)\n    vertex(v3, bval = true)\n    vertex{(v4), (v5, parent = v3), (v6, distance = 4, parent = v1, bval = true)}\n    v1 -- v2\n    v2 -- (v3, t = \"Hello my lady\")\n    edge e = graph.getedge(v2, v3)\n    vertex var = v2\n    graph.removeedge(v1, v2)\n    graph.removeedge(v2, v3)\n    v2 -> v3\n    v3 -> {(v4), (v5, weight = 42, t = \"The Answer\")}\n    v1 <- v6\n    v2 <- {(v3), (v5, t = \"the world\")}\n    graph.clearedges()\n    graph.clearvertices()\n    vertex(v1_2)\n    vertex(v2_2, distance = 4, parent = v1, bval = true)\n    v1 -> v2\n    graph.clearall()\n}\n\nfunc none expr()\n{\n    vertex(v2_3, distance = 4, parent = v1, bval = true)\n    boolean b = 5 != 6 && 5 - 8 + 9 * (v2.distance) > -8 + 11 % 3 || 5 == 8 || 11 * (54 - 6) < -4\n}\n\nfunc boolean manyparams(vertex v1, number n, boolean mightbetrue, text greeting)\n{\n    return false\n}\n\nfunc boolean hello(text greet)\n{\n    return true\n}\n";

        public const string XmlTree = "<MAGIA>\n<BlockNode>\n<HeadNode>\n<BlockNode>\n<VarDeclNode>\n<NumConst>\n</NumConst>\n</VarDeclNode>\n<VarDeclNode>\n<NoneConst>\n</NoneConst>\n</VarDeclNode>\n<VarDeclNode>\n<BoolConst>\n</BoolConst>\n</VarDeclNode>\n</BlockNode>\n</HeadNode>\n<HeadNode>\n<BlockNode>\n<VarDeclNode>\n<NumConst>\n</NumConst>\n</VarDeclNode>\n<VarDeclNode>\n</VarDeclNode>\n</BlockNode>\n</HeadNode>\n<LoneCallNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</LoneCallNode>\n<VertexDeclNode>\n<BlockNode>\n</BlockNode>\n</VertexDeclNode>\n<LoneCallNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</LoneCallNode>\n<VarDeclNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</VarDeclNode>\n<VarDeclNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</VarDeclNode>\n<LoneCallNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</LoneCallNode>\n<LoneCallNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</LoneCallNode>\n<LoneCallNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</LoneCallNode>\n<LoneCallNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</LoneCallNode>\n<FuncDeclNode>\n<BlockNode>\n<VarDeclNode>\n</VarDeclNode>\n</BlockNode>\n<BlockNode>\n<ReturnNode>\n<BinExprNode>\n<BinExprNode>\n<NumConst>\n</NumConst>\n<NumConst>\n</NumConst>\n</BinExprNode>\n<VarNode>\n</VarNode>\n</BinExprNode>\n</ReturnNode>\n</BlockNode>\n</FuncDeclNode>\n<FuncDeclNode>\n<BlockNode>\n</BlockNode>\n<BlockNode>\n<VarDeclNode>\n<NumConst>\n</NumConst>\n</VarDeclNode>\n<VarDeclNode>\n</VarDeclNode>\n<VarDeclNode>\n<BoolConst>\n</BoolConst>\n</VarDeclNode>\n<WhileNode>\n<UnaExprNode>\n<VarNode>\n</VarNode>\n</UnaExprNode>\n<BlockNode>\n<IfNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</BinExprNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</BinExprNode>\n</AssignNode>\n<IfNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</BinExprNode>\n<BlockNode>\n<BreakNode>\n</BreakNode>\n</BlockNode>\n<IfNode>\n<BlockNode>\n<ContinueNode>\n</ContinueNode>\n</BlockNode>\n</IfNode>\n</IfNode>\n<IfNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</BinExprNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</BinExprNode>\n</AssignNode>\n</BlockNode>\n<IfNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</BinExprNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</AssignNode>\n</BlockNode>\n<IfNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</AssignNode>\n</BlockNode>\n</IfNode>\n</IfNode>\n</IfNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BoolConst>\n</BoolConst>\n</AssignNode>\n</BlockNode>\n</IfNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</BinExprNode>\n</AssignNode>\n</BlockNode>\n</WhileNode>\n<WhileNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</BinExprNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</BinExprNode>\n</AssignNode>\n</BlockNode>\n</WhileNode>\n<VarDeclNode>\n</VarDeclNode>\n<ForNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</AssignNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</BinExprNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</BinExprNode>\n</AssignNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</BinExprNode>\n</BinExprNode>\n</AssignNode>\n</BlockNode>\n</ForNode>\n<ReturnNode>\n<VarNode>\n</VarNode>\n</ReturnNode>\n</BlockNode>\n</FuncDeclNode>\n<FuncDeclNode>\n<BlockNode>\n</BlockNode>\n<BlockNode>\n<VarDeclNode>\n<NumConst>\n</NumConst>\n</VarDeclNode>\n<VarDeclNode>\n<CollecConst>\n</CollecConst>\n</VarDeclNode>\n<ForeachNode>\n<VarDeclNode>\n</VarDeclNode>\n<VarNode>\n</VarNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BinExprNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</BinExprNode>\n</AssignNode>\n</BlockNode>\n</ForeachNode>\n</BlockNode>\n</FuncDeclNode>\n<FuncDeclNode>\n<BlockNode>\n</BlockNode>\n<BlockNode>\n<VertexDeclNode>\n<BlockNode>\n</BlockNode>\n</VertexDeclNode>\n<VertexDeclNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</AssignNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</AssignNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BoolConst>\n</BoolConst>\n</AssignNode>\n</BlockNode>\n</VertexDeclNode>\n<VertexDeclNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BoolConst>\n</BoolConst>\n</AssignNode>\n</BlockNode>\n</VertexDeclNode>\n<MultiDecl>\n<VertexDeclNode>\n<BlockNode>\n</BlockNode>\n</VertexDeclNode>\n<VertexDeclNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</AssignNode>\n</BlockNode>\n</VertexDeclNode>\n<VertexDeclNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</AssignNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</AssignNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BoolConst>\n</BoolConst>\n</AssignNode>\n</BlockNode>\n</VertexDeclNode>\n</MultiDecl>\n<EdgeCreateNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</EdgeCreateNode>\n<EdgeCreateNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<TextConst>\n</TextConst>\n</AssignNode>\n</EdgeCreateNode>\n<VarDeclNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</VarDeclNode>\n<VarDeclNode>\n<VarNode>\n</VarNode>\n</VarDeclNode>\n<LoneCallNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</LoneCallNode>\n<LoneCallNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</LoneCallNode>\n<EdgeCreateNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</EdgeCreateNode>\n<EdgeCreateNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</AssignNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<TextConst>\n</TextConst>\n</AssignNode>\n</EdgeCreateNode>\n<EdgeCreateNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</EdgeCreateNode>\n<EdgeCreateNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<TextConst>\n</TextConst>\n</AssignNode>\n</EdgeCreateNode>\n<LoneCallNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</LoneCallNode>\n<LoneCallNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</LoneCallNode>\n<VertexDeclNode>\n<BlockNode>\n</BlockNode>\n</VertexDeclNode>\n<VertexDeclNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</AssignNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</AssignNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BoolConst>\n</BoolConst>\n</AssignNode>\n</BlockNode>\n</VertexDeclNode>\n<EdgeCreateNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</EdgeCreateNode>\n<LoneCallNode>\n<CallNode>\n<CollecConst>\n</CollecConst>\n</CallNode>\n</LoneCallNode>\n</BlockNode>\n</FuncDeclNode>\n<FuncDeclNode>\n<BlockNode>\n</BlockNode>\n<BlockNode>\n<VertexDeclNode>\n<BlockNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<NumConst>\n</NumConst>\n</AssignNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<VarNode>\n</VarNode>\n</AssignNode>\n<AssignNode>\n<VarNode>\n</VarNode>\n<BoolConst>\n</BoolConst>\n</AssignNode>\n</BlockNode>\n</VertexDeclNode>\n<VarDeclNode>\n<BinExprNode>\n<BinExprNode>\n<BinExprNode>\n<BinExprNode>\n<NumConst>\n</NumConst>\n<NumConst>\n</NumConst>\n</BinExprNode>\n<BinExprNode>\n<BinExprNode>\n<BinExprNode>\n<NumConst>\n</NumConst>\n<NumConst>\n</NumConst>\n</BinExprNode>\n<BinExprNode>\n<NumConst>\n</NumConst>\n<VarNode>\n<VarNode>\n</VarNode>\n</VarNode>\n</BinExprNode>\n</BinExprNode>\n<BinExprNode>\n<UnaExprNode>\n<NumConst>\n</NumConst>\n</UnaExprNode>\n<BinExprNode>\n<NumConst>\n</NumConst>\n<NumConst>\n</NumConst>\n</BinExprNode>\n</BinExprNode>\n</BinExprNode>\n</BinExprNode>\n<BinExprNode>\n<NumConst>\n</NumConst>\n<NumConst>\n</NumConst>\n</BinExprNode>\n</BinExprNode>\n<BinExprNode>\n<BinExprNode>\n<NumConst>\n</NumConst>\n<BinExprNode>\n<NumConst>\n</NumConst>\n<NumConst>\n</NumConst>\n</BinExprNode>\n</BinExprNode>\n<UnaExprNode>\n<NumConst>\n</NumConst>\n</UnaExprNode>\n</BinExprNode>\n</BinExprNode>\n</VarDeclNode>\n</BlockNode>\n</FuncDeclNode>\n<FuncDeclNode>\n<BlockNode>\n<VarDeclNode>\n</VarDeclNode>\n<VarDeclNode>\n</VarDeclNode>\n<VarDeclNode>\n</VarDeclNode>\n<VarDeclNode>\n</VarDeclNode>\n</BlockNode>\n<BlockNode>\n<ReturnNode>\n<BoolConst>\n</BoolConst>\n</ReturnNode>\n</BlockNode>\n</FuncDeclNode>\n<FuncDeclNode>\n<BlockNode>\n<VarDeclNode>\n</VarDeclNode>\n</BlockNode>\n<BlockNode>\n<ReturnNode>\n<BoolConst>\n</BoolConst>\n</ReturnNode>\n</BlockNode>\n</FuncDeclNode>\n</BlockNode>\n</MAGIA>\n";
    }
}