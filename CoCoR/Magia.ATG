COMPILER MAGIA

    /*
    public SymbolTable   tab;
    public CodeGenerator gen;
    */
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  CharInLine = ANY - '\r' - '\n'.
  AnyButDoubleQuote = CharInLine - '\"'.

TOKENS
  IDENT  = letter {letter | digit | '_'}.
  NUMBER = digit {digit} | digit {digit} '.' digit {digit}.
  TEXT = '"' {AnyButDoubleQuote | "\\\""} '"'.
  NONE = "none".
  TRUE = "true".
  FALSE = "false".
  RPAREN = ')'.
  
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab



PRODUCTIONS
/*------------------------------------------------------------------------*/
MAGIA =                             (. HeadNode headNode; mainNode = new MAGIA(); .)
    {SYNC Head<out headNode>        (. mainNode.Add(headNode);                    .)
    } 
    Stmts 
    {FuncDecl}.
    
/*------------------------------------------------------------------------*/
Head<out HeadNode headNode>              (. headNode = null; .) 
    = '[' 
    ( "vertex"                           (. headNode = new HeadNode(HeadNode.VERTEX); .)
    | "edge"                             (. headNode = new HeadNode(HeadNode.EDGE);   .)
    ) 
    WEAK '(' AttrDecls<ref headNode>
    WEAK ')' ']'.

/*------------------------------------------------------------------------*/
AttrDecls<ref HeadNode headNode>
    = AttrDecl<out varDecl>              (. headNode.AddAttr(varDecl); .)
    {
        WEAK ',' AttrDecl<out varDecl>   (. headNode.AddAttr(varDecl); .)
    }.

/*------------------------------------------------------------------------*/
AttrDecl<out VarDeclNode varDecl> = (. varDecl = null; .)
    Type<out int typ>
    IDENT
    [
        Assign<>
    ]
    .


/*------------------------------------------------------------------------*/
FuncDecl
    = SYNC "func" IDENT '(' [IF(la.kind != _RPAREN) FuncParams] ')' SYNC '{' Stmts SYNC '}'.

/*------------------------------------------------------------------------*/
FuncParams
    = Type IDENT {SYNC ',' Type IDENT}.


/*------------------------------------------------------------------------*/
Stmts
    = SYNC {Stmt | StrucStmt}.

/*------------------------------------------------------------------------*/
StrucStmt
    = "while" '(' Expr ')' '{' Stmts '}'
    | "for" '(' Stmt ',' Expr ',' Stmt ')' '{' Stmts '}'
    | "foreach" '(' Type Identifier "in" Expr ')' '{' Stmts '}'
    | "if" '(' Expr ')' '{' Stmts '}' {"elseif" '(' Expr ')' '{' Stmts '}'} ["else" '{' Stmts '}'].

/*------------------------------------------------------------------------*/
Stmt
    = (FullDecl | CallOrID {Member} IdentCont | "return" Expr).

/*------------------------------------------------------------------------*/
IdentCont
    = Assign | EdgeOpr EdgeOneOrMore.

/*------------------------------------------------------------------------*/
Member
    = WEAK '.' CallOrID.

/*------------------------------------------------------------------------*/
FullDecl
    = Type (IDENT [Assign] | '{' VtxDecls '}' | VtxDecl).

/*------------------------------------------------------------------------*/
Assign<out AssignNode assign>           (.  .)
    = '=' 
    (Expr<out Expr expr>                (.  .)
    | '{' Args<out CollecConst collec> 
    '}'
    ).

/*------------------------------------------------------------------------*/
VtxDecls
    = VtxDecl {WEAK ',' VtxDecl}.

/*------------------------------------------------------------------------*/
VtxDecl
    = '(' IDENT VEParams ')'.

/*------------------------------------------------------------------------*/
EdgeOpr
    = ("<-" | "--" | "->").

/*------------------------------------------------------------------------*/
EdgeOneOrMore
    = (Identifier | EdgeDecl | '{' EdgeDecls '}').

/*------------------------------------------------------------------------*/
EdgeDecls 
    = EdgeDecl {WEAK ',' EdgeDecl}.

/*------------------------------------------------------------------------*/
EdgeDecl 
    = '(' IDENT VEParams ')'.


/*------------------------------------------------------------------------*/
VEParams
    = {WEAK ',' Identifier Assign}.


/*------------------------------------------------------------------------*/
Expr<out Expr expr> (. expr = null; .)
    = ExprOR.
    
/*------------------------------------------------------------------------*/
ExprOR
    = ExprAnd {"||" ExprAnd}.

/*------------------------------------------------------------------------*/
ExprAnd
    = ExprEQ {"&&" ExprEQ}.

/*------------------------------------------------------------------------*/
ExprEQ
    = ExprRel [("==" | "!=") ExprRel].

/*------------------------------------------------------------------------*/
ExprRel
    = ExprPlus [('<' | '>' | "<=" | ">=") ExprPlus].

/*------------------------------------------------------------------------*/
ExprPlus
    = ['-'] ExprMult {('+' | '-') ExprMult}.

/*------------------------------------------------------------------------*/
ExprMult
    = ExprNot {('*' | '/' | '%') ExprNot}.

/*------------------------------------------------------------------------*/
ExprNot
    = ['!'] Factor.

/*------------------------------------------------------------------------*/
Factor
    = Const | ('(' Expr ')' | CallOrID) {Member}.


/*------------------------------------------------------------------------*/
CallOrID
    = Identifier ['(' Args<out CollecConst collec> ')'].

/*------------------------------------------------------------------------*/
Args<out CollecConst collec> =      (. collec = new CollecConst(); Expr expr; .)
    [
        Expr<out expr>              (. collec.Add(expr); .)
        {
            WEAK ',' Expr<out expr> (. collec.Add(expr); .)
        }
    ].


/*------------------------------------------------------------------------*/
Identifier<out IdentNode ident> (. ident = null; .)
    = IDENT                     (. ident = new IdentNode(t.val); .)


/*------------------------------------------------------------------------*/
Const
    = NUMBER
    | TEXT
    | TRUE
    | FALSE
    | NONE.

/*------------------------------------------------------------------------*/
Type
    = SingleType
    | CollecType.

/*------------------------------------------------------------------------*/
CollecType
    = "list" WEAK '<' SingleType WEAK '>'
    | "set" WEAK '<' SingleType WEAK '>'
    | "queue" WEAK '<' SingleType WEAK '>'
    | "stack" WEAK '<' SingleType WEAK '>'.

/*------------------------------------------------------------------------*/
SingleType
    = "number"
    | "bool"
    | "text"
    | "vertex"
    | "edge".
/*------------------------------------------------------------------------*/

END MAGIA.
